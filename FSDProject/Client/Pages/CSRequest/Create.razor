@page "/csRequests/create"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New CSRequest</h3>
<hr />
<br />

<EditForm Model="@csRequest" OnValidSubmit="CreateCSRequest">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Name: </label>
        <div>
            <InputText @bind-Value="@csRequest.RequestMessage" class="form-control" />
            <ValidationMessage For="@(() => csRequest.RequestMessage)" />
        </div>
    </div>

    <div class="form-group">
    <label>CSession Details: </label>
    <div>
        <Text class="form-control" readonly="readonly">@csRequest.Status</Text>
        <ValidationMessage For="@(() => csRequest.Status)" />
    </div>
    </div>

    <!-- RequestDate field with a default value of the current time -->
    <div class="form-group">
        <label>Consultation Date: </label>
        <div>
            <InputDate @bind-Value="@csRequest.RequestDate" class="form-control" readonly="readonly" />
            <ValidationMessage For="@(() => csRequest.RequestDate)" />
        </div>
    </div>

    <div class="form-group">
        <label>Consultant ID: </label>
        <div>
            <InputSelect @bind-Value="@csRequest.ConsultantID" class="form-control">
                <option value=""> -- Select Consultant</option>
                @if (Consultants != null)
                {
                    foreach (var consultant in Consultants)
                    {
                        <option value="@consultant.Id">@consultant.ConsName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => csRequest.ConsultantID)" />
        </div>
    </div>

    <div class="form-group">
        <label>JobSeeker ID: </label>
        <div>
            <InputSelect @bind-Value="@csRequest.JobSeekerID" class="form-control">
                <option value=""> -- Select JobSeeker</option>
                @if (JobSeekers != null)
                {
                    foreach (var jobSeeker in JobSeekers)
                    {
                        <option value="@jobSeeker.Id">@jobSeeker.JSName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => csRequest.JobSeekerID)" />
        </div>
    </div>


    <button type="submit" class="btn btn-success btn-block">
        Create CSRequest
    </button>
</EditForm>

@code {
    CSRequest csRequest = new CSRequest();

    private IList<Consultant>? Consultants;
    private IList<JobSeeker>? JobSeekers;

    protected async override Task OnInitializedAsync()
    {
        Consultants = await _client.GetFromJsonAsync<List<Consultant>>($"{Endpoints.ConsultantsEndpoint}");
        JobSeekers = await _client.GetFromJsonAsync<List<JobSeeker>>($"{Endpoints.JobSeekersEndpoint}");

        csRequest.Status = RequestStatus.Pending;
        csRequest.RequestDate = DateTime.Now;
    }

    private async Task CreateCSRequest()
    {
        await _client.PostAsJsonAsync(Endpoints.CSRequestsEndpoint, csRequest);
        _navManager.NavigateTo("/csRequests");
    }
}