@page "/jobs"
@using FSDProject.Shared.Domain
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Available Jobs</h3>

@if (Jobs == null)
{
    <div class="alert alert-info">Loading Jobs...</div>
}
else
{
        <table class="table table-responsive">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Salary</th>
                    <th>Education</th>
                    <th>Description</th>
                    <th>Category</th>
                    <th>Level</th>
                    <th>Location</th>
                    <th>Deadline</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var job in Jobs)
                {
                    <tr>
                        <td>@job.JobTitle</td>
                        <td>@job.JobSalary</td>
                        <td>@job.JobEducation</td>
                        <td>@job.JobDescription</td>
                        <td>@job.JobCategory</td>
                        <td>@job.JobLevel</td>
                        <td>@job.JobLocation</td>
                        <td>@job.JobDeadline</td>
                        <td>
                            <a href="/jobs/view/@job.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/jobs/edit/@job.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(()=>Delete(job.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
            }           
            </tbody>
        </table>
}

@code {
    private List<Job>? Jobs;

    protected async override Task OnInitializedAsync()
    {
        Jobs = await _client.GetFromJsonAsync<List<Job>>($"{Endpoints.JobsEndpoint}");
    }

    async Task Delete(int jobId)
    {
        if (Jobs != null)
        {
            var job = Jobs.First(q => q.Id == jobId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {job.JobTitle}?");
            if(confirm)
            {
                await _client.DeleteAsync($"{Endpoints.JobsEndpoint}/{jobId}");
                await OnInitializedAsync();
            }
        }
    }


}